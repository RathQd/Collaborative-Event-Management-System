name: Collaborative_Event_Management_System
on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
jobs:
  cems:
    runs-on: ubuntu-latest    
    environment:
      name: dev
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DATABASE_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Hello User
        run: echo Hello ${{ github.actor }} 

      - name: Pulling Git Repository
        uses: actions/checkout@v4

      - name: Set Up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10.x'

      - name: Upgrade Pip
        run: python -m pip install --upgrade pip

      - name: Install Dependencies
        run: pip install -r requirements.txt

      - name: Get Environment Variables
        env:
          DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME }}                    
          DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
          ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}
          DATABASE_STRING: ${{ secrets.DATABASE_STRING }}        
      - name: Login into Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/cems:latest
          cache-from: type=gha
          cache-to: type=gha, mode=max
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
