from typing import List
from fastapi import HTTPException, status
from app.schema.event import ReadEvent
from app.utils.hash import hash, verify_hash
from sqlalchemy.exc import IntegrityError
from app.model.event import Event
from sqlmodel import select

async def create_event(event: Event, session)->ReadEvent:        
    try:                
        session.add(event)
        session.commit()    
    except Exception as e: 
        session.rollback()
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail=f"{str(e)}")
    session.refresh(event)
    return event

async def get_event_by_id(id: int, session)->ReadEvent:
        event = session.get(Event, id)
        return event

async def update_event_by_id(id: int, event: Event, session)->ReadEvent:    
    event_to_update = session.exec(select(Event).where(Event.id == id)).first()    
    if event_to_update: 
        event.id = id
        event_to_update = session.merge(event)
        session.add(event_to_update)
        session.commit()
        session.refresh(event_to_update)        
    return event_to_update    

async def delete_event_by_id(id: int, session)->ReadEvent:
    event = session.get(Event, id)
    if event: 
        session.delete(event)
        session.commit()
    return event

async def create_events_batch(events: List[Event], session) -> List[Event]:
    # event_models = [
    #     Event(**event.model_dump(), owner_id=owner_id)
    #     for event in events
    # ]

    session.add_all(events)
    session.commit()

    # Refresh for autogenerated UUIDs
    for event in events:
        session.refresh(event)

    return events

